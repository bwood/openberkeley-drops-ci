<?php
/**
 * @file
 * Install hooks for the Open Berkeley Base Feature.
 */

/**
 * Implements hook_install().
 */
function openberkeley_base_install() {
  // Make sure our *_alter() hooks run after the Panopoly versions, in cases
  // where Panopoly already used hook_module_implements_alter() to put itself
  // at the end.
  db_update('system')
    ->fields(array('weight' => 50))
    ->condition('type', 'module')
    ->condition('name', 'openberkeley_base')
    ->execute();

  // Fill the quicklinks region with default blocks.
  $default_theme = 'berkeley';
  $blocks = array(
    array(
      'module' => 'menu',
      'delta' => 'menu-quick-links-menu',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => -19,
      'region' => 'quick_links',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'menu',
      'delta' => 'devel',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => -18,
      'region' => 'quick_links',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'system',
      'delta' => 'user-menu',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => -17,
      'region' => 'quick_links',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'devel',
      'delta' => 'switch_user',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => -16,
      'region' => 'quick_links',
      'pages' => '',
      'cache' => -1,
    ),
  );
  foreach ($blocks as $block) {
    $query = db_merge('block')
      ->key(array(
        'module' => $block['module'],
        'delta' => $block['delta'],
        'theme' => $block['theme'],
      ))
      ->fields($block)
      ->execute();
  }

  /*
   * Panopoly (panopoly_pages.module, panopoly_core.module) sets a bunch of
   * panelizer permissions for editor which are not
   * appropriate for Open Berkeley. This revokes any role containing "administer
   * panelizer" for which editor has access. The thinking is that it's possible
   * that panopoly could add other "administer panelizer" permissions in the
   * future.  If panopoly grants roles outside of "administer panelizer*" we
   * can adapt this.
   */
  $editor = user_role_load_by_name('editor');
  $editor_roles = user_role_permissions(array($editor->rid => 'editor'));
  foreach ($editor_roles as $roles) {
    while (list($role, $value) = each($roles)) {
      if ((strpos($role, "administer panelizer") !== FALSE) && ($value === TRUE)) {
        user_role_revoke_permissions($editor->rid, array($role));
      }
    }
  }
}
